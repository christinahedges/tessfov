{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tessFOV tessFOV will plot the footprint of NASA's TESS Spacecraft pointings on your existing matplotlib.pyplot.Axes objects. tessFOV uses the tess-point package to find the edges of the CCDs for any given pointing, and provides user friendly functions for plotting these footprints. Requirements tessFOV requires Python 3.8 or higher. The full list of module requirements can be found in the pyproject.toml file of this module. tessFOV Functions tessFOV has the following functions available: add_tessfov_outline: Adds outlines for a given sector, camera, CCD add_tessfov_shade: Adds shaded regions for a given sector, camera, CCD add_tessfov_text: Adds labels for a given sector, camera, CCD You can specify any number of sectors [1 ... 69] , cameras [1 .. 4] , or CCDs [1 .. 4] . Examples Below are a few examples of how to use tessFOV . Adding to matplotlib subplot Below is an example of how to add the footprint to your existing plot. Here we plot a subset of the sectors from Cycle 1, and plot only the outlines of the CCDs. You can pass matplotlib.pyplot.plot keyword arguments to add_tessfov_outline (e.g. ls , lw , color ). from tessfov import add_tessfov_outline fig = plt . figure ( dpi = 150 ) ax = plt . subplot ( 111 ) ax . set ( xlabel = \"RA\" , ylabel = \"Dec\" , xlim = ( 0 , 360 ), ylim = ( - 90 , 90 )) add_tessfov_outline ( ax , sector = np . arange ( 1 , 14 , 3 )) Examples Below are a few examples of how to use tessFOV . Adding to matplotlib map projections You can add the footprint to matplotlib projections (such as the 'hammer' projection). In these cases you must use the wrap_at keyword to ensure that the points \"wrap\" at 180 degrees. You should also use the unit 'rad' (radians), as this is what is standard for this plotting projection. Below we plot 4 sectors from Cycle 5. from tessfov import add_tessfov_shade fig = plt . figure ( dpi = 150 ) ax = plt . subplot ( 111 , projection = \"hammer\" ) add_tessfov_shade ( ax , sector = np . arange ( 56 , 60 ), unit = \"rad\" , wrap_at = 180 , rasterized = True ) ax . set ( xlabel = \"RA\" , ylabel = \"Dec\" ) ax . grid ( True , ls = \"--\" ) Examples Below are a few examples of how to use tessFOV . Adding one CCD You are able to use tessFOV to plot a subset of sectors, cameras and CCDs. Below we plot a single CCD from sector 2, and add a label. fig = plt . figure ( dpi = 150 ) ax = plt . subplot ( 111 ) ax . set ( xlabel = \"RA\" , ylabel = \"Dec\" , xlim = ( 330 , 360 ), ylim = ( - 40 , 0 )) add_tessfov_outline ( ax , sector = 2 , camera = 1 , ccd = 4 , color = \"grey\" , ls = \"--\" ) add_tessfov_text ( ax , sector = 2 , camera = 1 , ccd = 4 , color = \"grey\" , fontsize = 12 ) Gotchas When adding shaded regions using add_tessfov_shade , you may find that the xlim and ylim of your plot do not update to capture those patches. You should adjust the xlim and ylim parameters of your matplotlib.pyplot.Axes object. Installation You can install tessFOV using pip: pip install tessfov --upgrade","title":"Home"},{"location":"#tessfov","text":"tessFOV will plot the footprint of NASA's TESS Spacecraft pointings on your existing matplotlib.pyplot.Axes objects. tessFOV uses the tess-point package to find the edges of the CCDs for any given pointing, and provides user friendly functions for plotting these footprints.","title":"tessFOV"},{"location":"#requirements","text":"tessFOV requires Python 3.8 or higher. The full list of module requirements can be found in the pyproject.toml file of this module.","title":"Requirements"},{"location":"#tessfov-functions","text":"tessFOV has the following functions available: add_tessfov_outline: Adds outlines for a given sector, camera, CCD add_tessfov_shade: Adds shaded regions for a given sector, camera, CCD add_tessfov_text: Adds labels for a given sector, camera, CCD You can specify any number of sectors [1 ... 69] , cameras [1 .. 4] , or CCDs [1 .. 4] .","title":"tessFOV Functions"},{"location":"#examples","text":"Below are a few examples of how to use tessFOV .","title":"Examples"},{"location":"#adding-to-matplotlib-subplot","text":"Below is an example of how to add the footprint to your existing plot. Here we plot a subset of the sectors from Cycle 1, and plot only the outlines of the CCDs. You can pass matplotlib.pyplot.plot keyword arguments to add_tessfov_outline (e.g. ls , lw , color ). from tessfov import add_tessfov_outline fig = plt . figure ( dpi = 150 ) ax = plt . subplot ( 111 ) ax . set ( xlabel = \"RA\" , ylabel = \"Dec\" , xlim = ( 0 , 360 ), ylim = ( - 90 , 90 )) add_tessfov_outline ( ax , sector = np . arange ( 1 , 14 , 3 ))","title":"Adding to matplotlib subplot"},{"location":"#examples_1","text":"Below are a few examples of how to use tessFOV .","title":"Examples"},{"location":"#adding-to-matplotlib-map-projections","text":"You can add the footprint to matplotlib projections (such as the 'hammer' projection). In these cases you must use the wrap_at keyword to ensure that the points \"wrap\" at 180 degrees. You should also use the unit 'rad' (radians), as this is what is standard for this plotting projection. Below we plot 4 sectors from Cycle 5. from tessfov import add_tessfov_shade fig = plt . figure ( dpi = 150 ) ax = plt . subplot ( 111 , projection = \"hammer\" ) add_tessfov_shade ( ax , sector = np . arange ( 56 , 60 ), unit = \"rad\" , wrap_at = 180 , rasterized = True ) ax . set ( xlabel = \"RA\" , ylabel = \"Dec\" ) ax . grid ( True , ls = \"--\" )","title":"Adding to matplotlib map projections"},{"location":"#examples_2","text":"Below are a few examples of how to use tessFOV .","title":"Examples"},{"location":"#adding-one-ccd","text":"You are able to use tessFOV to plot a subset of sectors, cameras and CCDs. Below we plot a single CCD from sector 2, and add a label. fig = plt . figure ( dpi = 150 ) ax = plt . subplot ( 111 ) ax . set ( xlabel = \"RA\" , ylabel = \"Dec\" , xlim = ( 330 , 360 ), ylim = ( - 40 , 0 )) add_tessfov_outline ( ax , sector = 2 , camera = 1 , ccd = 4 , color = \"grey\" , ls = \"--\" ) add_tessfov_text ( ax , sector = 2 , camera = 1 , ccd = 4 , color = \"grey\" , fontsize = 12 )","title":"Adding one CCD"},{"location":"#gotchas","text":"When adding shaded regions using add_tessfov_shade , you may find that the xlim and ylim of your plot do not update to capture those patches. You should adjust the xlim and ylim parameters of your matplotlib.pyplot.Axes object.","title":"Gotchas"},{"location":"#installation","text":"You can install tessFOV using pip: pip install tessfov --upgrade","title":"Installation"},{"location":"api/","text":"Documentation for tessFOV tessfov.tessfov add_tessfov_outline ( ax , sector = [ 1 ], camera = None , ccd = None , unit = 'deg' , wrap_at = 360 , color = 'k' , ** kwargs ) Adds the outline of the input TESS CCD, camera, and sector to ax . Parameters: Name Type Description Default sector Union[int, List[int], numpy.ndarray] Input sectors to process [1] camera Union[int, List[int], numpy.ndarray] Input cameras to process None ccd Union[int, List[int], numpy.ndarray] Input CCDs to process None unit str Astropy unit to use for angles. Use 'deg' for degrees, 'rad' for radians. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use radians. 'deg' wrap_at Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use 180 degrees. 360 color str Color to plot the outline in 'k' kwargs dict Keywords to pass to matplotlib.pyplot.plot {} Source code in tessfov/tessfov.py def add_tessfov_outline ( ax : plt . Axes , sector : Optional [ Union [ int , List [ int ], npt . NDArray ]] = [ 1 ], camera : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , ccd : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , unit : str = \"deg\" , wrap_at : Union [ int , float ] = 360 , color : str = \"k\" , ** kwargs , ): \"\"\"Adds the outline of the input TESS CCD, camera, and sector to `ax`. Parameters ---------- sector: Optional[Union[int, List[int], npt.NDArray]] Input sectors to process camera: Optional[Union[int, List[int], npt.NDArray]] Input cameras to process ccd: Optional[Union[int, List[int], npt.NDArray]] Input CCDs to process unit: str Astropy unit to use for angles. Use `'deg'` for degrees, `'rad'` for radians. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use radians. wrap_at: Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use 180 degrees. color: str Color to plot the outline in kwargs: dict Keywords to pass to `matplotlib.pyplot.plot` \"\"\" patches = get_edges ( sector = sector , camera = camera , ccd = ccd , unit = unit , wrap_at = wrap_at ) for patch in patches : ax . plot ( patch [ 0 ], patch [ 1 ], color = color , ** kwargs ) add_tessfov_shade ( ax , sector = [ 1 ], camera = None , ccd = None , unit = 'deg' , wrap_at = 360 , color = 'k' , alpha = 0.15 , lw = 0.75 , ** kwargs ) Adds a shaded patch corresponding to the input TESS CCD, camera, and sector to ax . Parameters: Name Type Description Default sector Union[int, List[int], numpy.ndarray] Input sectors to process [1] camera Union[int, List[int], numpy.ndarray] Input cameras to process None ccd Union[int, List[int], numpy.ndarray] Input CCDs to process None unit str Astropy unit to use for angles. Use 'deg' for degrees, 'rad' for radians. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use radians. 'deg' wrap_at Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use 180 degrees. 360 color str Color to plot the outline in 'k' alpha float The transparancy (alpha) of the patch 0.15 lw float Line width to outline the patch 0.75 kwargs dict Keywords to pass to matplotlib.pyplot.Polygon {} Source code in tessfov/tessfov.py def add_tessfov_shade ( ax : plt . Axes , sector : Optional [ Union [ int , List [ int ], npt . NDArray ]] = [ 1 ], camera : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , ccd : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , unit : str = \"deg\" , wrap_at : Union [ int , float ] = 360 , color : str = \"k\" , alpha : float = 0.15 , lw : float = 0.75 , ** kwargs , ): \"\"\"Adds a shaded patch corresponding to the input TESS CCD, camera, and sector to `ax`. Parameters ---------- sector: Optional[Union[int, List[int], npt.NDArray]] Input sectors to process camera: Optional[Union[int, List[int], npt.NDArray]] Input cameras to process ccd: Optional[Union[int, List[int], npt.NDArray]] Input CCDs to process unit: str Astropy unit to use for angles. Use `'deg'` for degrees, `'rad'` for radians. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use radians. wrap_at: Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use 180 degrees. color: str Color to plot the outline in alpha: float The transparancy (alpha) of the patch lw: float Line width to outline the patch kwargs: dict Keywords to pass to `matplotlib.pyplot.Polygon` \"\"\" patches = get_edges ( sector = sector , camera = camera , ccd = ccd , unit = unit , wrap_at = wrap_at ) for patch in patches : poly = plt . Polygon ( np . vstack ([ patch [ 0 ], patch [ 1 ]]) . T , color = color , alpha = 0.15 , lw = lw , ** kwargs ) ax . add_patch ( poly ) add_tessfov_text ( ax , sector = [ 1 ], camera = None , ccd = None , unit = 'deg' , wrap_at = 360 , ha = 'center' , va = 'center' , color = 'k' , ** kwargs ) Adds labels of the input TESS CCD, camera, and sector to ax . Parameters: Name Type Description Default sector Union[int, List[int], numpy.ndarray] Input sectors to process [1] camera Union[int, List[int], numpy.ndarray] Input cameras to process None ccd Union[int, List[int], numpy.ndarray] Input CCDs to process None unit str Astropy unit to use for angles. Use 'deg' for degrees, 'rad' for radians. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use radians. 'deg' wrap_at Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use 180 degrees. 360 ha str Horizontal alignment. Default is 'center' 'center' va str Vertical alignment. Default is 'center' 'center' color str Color to plot the outline in 'k' kwargs dict Keywords to pass to matplotlib.pyplot.plot {} Source code in tessfov/tessfov.py def add_tessfov_text ( ax : plt . Axes , sector : Optional [ Union [ int , List [ int ], npt . NDArray ]] = [ 1 ], camera : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , ccd : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , unit : str = \"deg\" , wrap_at : Union [ int , float ] = 360 , ha : str = \"center\" , va : str = \"center\" , color : str = \"k\" , ** kwargs , ): \"\"\"Adds labels of the input TESS CCD, camera, and sector to `ax`. Parameters ---------- sector: Optional[Union[int, List[int], npt.NDArray]] Input sectors to process camera: Optional[Union[int, List[int], npt.NDArray]] Input cameras to process ccd: Optional[Union[int, List[int], npt.NDArray]] Input CCDs to process unit: str Astropy unit to use for angles. Use `'deg'` for degrees, `'rad'` for radians. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use radians. wrap_at: Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use 180 degrees. ha : str Horizontal alignment. Default is 'center' va : str Vertical alignment. Default is 'center' color: str Color to plot the outline in kwargs: dict Keywords to pass to `matplotlib.pyplot.plot` \"\"\" patches , labels = get_edges ( sector = sector , camera = camera , ccd = ccd , unit = unit , wrap_at = wrap_at , return_labels = True , ) for patch , label in zip ( patches , labels ): ax . text ( patch [ 0 ] . mean (), patch [ 1 ] . mean (), f \"Sector { label [ 0 ] } \\n Cam { label [ 1 ] } \\n CCD { label [ 2 ] } \" , ha = ha , va = va , color = color , ** kwargs , ) footprint ( npoints = 5 ) Gets the column and row points for CCD edges Source code in tessfov/tessfov.py def footprint ( npoints = 5 ): \"\"\"Gets the column and row points for CCD edges\"\"\" column = np . hstack ( [ np . zeros ( npoints ), np . linspace ( 0 , 2048 , npoints ), np . linspace ( 0 , 2048 , npoints ), np . ones ( npoints ) * 2048 , ] ) row = np . hstack ( [ np . linspace ( 0 , 2048 , npoints ), np . zeros ( npoints ), np . ones ( npoints ) * 2048 , np . linspace ( 0 , 2048 , npoints ), ] ) return column , row sort_patch ( patch ) Finds the center of a patch, and orders points by angle around the center. Source code in tessfov/tessfov.py def sort_patch ( patch ): \"\"\"Finds the center of a patch, and orders points by angle around the center.\"\"\" angle = np . arctan2 ( * ( patch - np . mean ( patch , axis = 1 )[:, None ])) p = np . asarray ( patch )[:, np . argsort ( angle )] return p [:, np . hstack ([ np . arange ( p . shape [ 1 ]), 0 ])]","title":"API"},{"location":"api/#documentation-for-tessfov","text":"","title":"Documentation for tessFOV"},{"location":"api/#tessfov.tessfov","text":"","title":"tessfov"},{"location":"api/#tessfov.tessfov.add_tessfov_outline","text":"Adds the outline of the input TESS CCD, camera, and sector to ax . Parameters: Name Type Description Default sector Union[int, List[int], numpy.ndarray] Input sectors to process [1] camera Union[int, List[int], numpy.ndarray] Input cameras to process None ccd Union[int, List[int], numpy.ndarray] Input CCDs to process None unit str Astropy unit to use for angles. Use 'deg' for degrees, 'rad' for radians. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use radians. 'deg' wrap_at Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use 180 degrees. 360 color str Color to plot the outline in 'k' kwargs dict Keywords to pass to matplotlib.pyplot.plot {} Source code in tessfov/tessfov.py def add_tessfov_outline ( ax : plt . Axes , sector : Optional [ Union [ int , List [ int ], npt . NDArray ]] = [ 1 ], camera : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , ccd : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , unit : str = \"deg\" , wrap_at : Union [ int , float ] = 360 , color : str = \"k\" , ** kwargs , ): \"\"\"Adds the outline of the input TESS CCD, camera, and sector to `ax`. Parameters ---------- sector: Optional[Union[int, List[int], npt.NDArray]] Input sectors to process camera: Optional[Union[int, List[int], npt.NDArray]] Input cameras to process ccd: Optional[Union[int, List[int], npt.NDArray]] Input CCDs to process unit: str Astropy unit to use for angles. Use `'deg'` for degrees, `'rad'` for radians. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use radians. wrap_at: Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use 180 degrees. color: str Color to plot the outline in kwargs: dict Keywords to pass to `matplotlib.pyplot.plot` \"\"\" patches = get_edges ( sector = sector , camera = camera , ccd = ccd , unit = unit , wrap_at = wrap_at ) for patch in patches : ax . plot ( patch [ 0 ], patch [ 1 ], color = color , ** kwargs )","title":"add_tessfov_outline()"},{"location":"api/#tessfov.tessfov.add_tessfov_shade","text":"Adds a shaded patch corresponding to the input TESS CCD, camera, and sector to ax . Parameters: Name Type Description Default sector Union[int, List[int], numpy.ndarray] Input sectors to process [1] camera Union[int, List[int], numpy.ndarray] Input cameras to process None ccd Union[int, List[int], numpy.ndarray] Input CCDs to process None unit str Astropy unit to use for angles. Use 'deg' for degrees, 'rad' for radians. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use radians. 'deg' wrap_at Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use 180 degrees. 360 color str Color to plot the outline in 'k' alpha float The transparancy (alpha) of the patch 0.15 lw float Line width to outline the patch 0.75 kwargs dict Keywords to pass to matplotlib.pyplot.Polygon {} Source code in tessfov/tessfov.py def add_tessfov_shade ( ax : plt . Axes , sector : Optional [ Union [ int , List [ int ], npt . NDArray ]] = [ 1 ], camera : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , ccd : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , unit : str = \"deg\" , wrap_at : Union [ int , float ] = 360 , color : str = \"k\" , alpha : float = 0.15 , lw : float = 0.75 , ** kwargs , ): \"\"\"Adds a shaded patch corresponding to the input TESS CCD, camera, and sector to `ax`. Parameters ---------- sector: Optional[Union[int, List[int], npt.NDArray]] Input sectors to process camera: Optional[Union[int, List[int], npt.NDArray]] Input cameras to process ccd: Optional[Union[int, List[int], npt.NDArray]] Input CCDs to process unit: str Astropy unit to use for angles. Use `'deg'` for degrees, `'rad'` for radians. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use radians. wrap_at: Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use 180 degrees. color: str Color to plot the outline in alpha: float The transparancy (alpha) of the patch lw: float Line width to outline the patch kwargs: dict Keywords to pass to `matplotlib.pyplot.Polygon` \"\"\" patches = get_edges ( sector = sector , camera = camera , ccd = ccd , unit = unit , wrap_at = wrap_at ) for patch in patches : poly = plt . Polygon ( np . vstack ([ patch [ 0 ], patch [ 1 ]]) . T , color = color , alpha = 0.15 , lw = lw , ** kwargs ) ax . add_patch ( poly )","title":"add_tessfov_shade()"},{"location":"api/#tessfov.tessfov.add_tessfov_text","text":"Adds labels of the input TESS CCD, camera, and sector to ax . Parameters: Name Type Description Default sector Union[int, List[int], numpy.ndarray] Input sectors to process [1] camera Union[int, List[int], numpy.ndarray] Input cameras to process None ccd Union[int, List[int], numpy.ndarray] Input CCDs to process None unit str Astropy unit to use for angles. Use 'deg' for degrees, 'rad' for radians. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use radians. 'deg' wrap_at Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. 'mollweide' or 'hammer' ) use 180 degrees. 360 ha str Horizontal alignment. Default is 'center' 'center' va str Vertical alignment. Default is 'center' 'center' color str Color to plot the outline in 'k' kwargs dict Keywords to pass to matplotlib.pyplot.plot {} Source code in tessfov/tessfov.py def add_tessfov_text ( ax : plt . Axes , sector : Optional [ Union [ int , List [ int ], npt . NDArray ]] = [ 1 ], camera : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , ccd : Optional [ Union [ int , List [ int ], npt . NDArray ]] = None , unit : str = \"deg\" , wrap_at : Union [ int , float ] = 360 , ha : str = \"center\" , va : str = \"center\" , color : str = \"k\" , ** kwargs , ): \"\"\"Adds labels of the input TESS CCD, camera, and sector to `ax`. Parameters ---------- sector: Optional[Union[int, List[int], npt.NDArray]] Input sectors to process camera: Optional[Union[int, List[int], npt.NDArray]] Input cameras to process ccd: Optional[Union[int, List[int], npt.NDArray]] Input CCDs to process unit: str Astropy unit to use for angles. Use `'deg'` for degrees, `'rad'` for radians. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use radians. wrap_at: Union[int, float] The angle at which to \"wrap\" the edges. By default this is 360 degrees. For matplotlib projections (e.g. `'mollweide'` or `'hammer'`) use 180 degrees. ha : str Horizontal alignment. Default is 'center' va : str Vertical alignment. Default is 'center' color: str Color to plot the outline in kwargs: dict Keywords to pass to `matplotlib.pyplot.plot` \"\"\" patches , labels = get_edges ( sector = sector , camera = camera , ccd = ccd , unit = unit , wrap_at = wrap_at , return_labels = True , ) for patch , label in zip ( patches , labels ): ax . text ( patch [ 0 ] . mean (), patch [ 1 ] . mean (), f \"Sector { label [ 0 ] } \\n Cam { label [ 1 ] } \\n CCD { label [ 2 ] } \" , ha = ha , va = va , color = color , ** kwargs , )","title":"add_tessfov_text()"},{"location":"api/#tessfov.tessfov.footprint","text":"Gets the column and row points for CCD edges Source code in tessfov/tessfov.py def footprint ( npoints = 5 ): \"\"\"Gets the column and row points for CCD edges\"\"\" column = np . hstack ( [ np . zeros ( npoints ), np . linspace ( 0 , 2048 , npoints ), np . linspace ( 0 , 2048 , npoints ), np . ones ( npoints ) * 2048 , ] ) row = np . hstack ( [ np . linspace ( 0 , 2048 , npoints ), np . zeros ( npoints ), np . ones ( npoints ) * 2048 , np . linspace ( 0 , 2048 , npoints ), ] ) return column , row","title":"footprint()"},{"location":"api/#tessfov.tessfov.sort_patch","text":"Finds the center of a patch, and orders points by angle around the center. Source code in tessfov/tessfov.py def sort_patch ( patch ): \"\"\"Finds the center of a patch, and orders points by angle around the center.\"\"\" angle = np . arctan2 ( * ( patch - np . mean ( patch , axis = 1 )[:, None ])) p = np . asarray ( patch )[:, np . argsort ( angle )] return p [:, np . hstack ([ np . arange ( p . shape [ 1 ]), 0 ])]","title":"sort_patch()"}]}